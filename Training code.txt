from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense

# Step 1: Initialising the CNN
model = Sequential()

# Step 2: Convolution
model.add(Conv2D(32, (3, 3), input_shape = (50, 50, 3), activation = 'relu'))

# Step 3: Pooling
model.add(MaxPooling2D(pool_size = (2, 2)))

# Step 4: Second convolutional layer
model.add(Conv2D(32, (3, 3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2, 2)))

# Step 5: Flattening
model.add(Flatten())

# Step 6: Full connection
model.add(Dense(units = 128, activation = 'relu'))
model.add(Dense(units = 64, activation = 'relu'))
model.add(Dense(units = 32, activation = 'relu'))
model.add(Dense(units = 1, activation = 'sigmoid'))

# Step 7: Compiling the CNN
model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

# Step 8: ImageDataGenerator
fromkeras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(rescale = 1./255,
shear_range = 0.2,
zoom_range = 0.2,
horizontal_flip = True)

# Step 9: Load the training Set
training_set = train_datagen.flow_from_directory('./Dataset/Train',
target_size = (50, 50),
batch_size = 32,
class_mode = 'binary')

# Step 10: Classifier Training 
model.fit_generator(training_set,steps_per_epoch = 4000,epochs = 6,
validation_steps = 2000)

# Step 11: Convert the Model to json
model_json = model.to_json()
with open("./model.json","w") as json_file:
json_file.write(model_json)

# Step 12: Save the weights in a seperatefilemodel.save_weights("./model.h5")
print("Classifier trained Successfully!")
